package com.technototes.library.util;

import com.qualcomm.robotcore.util.Range;
import java.util.function.DoubleConsumer;

/**
 * @author Alex Stedman
 * Class for handling differentials
 * Potential uses include:
 *  - Differential (Tank) Drive
 *  - Differential Swerve
 *  - Differential Lifts and Slides
 *  - Differential PTOs
 *  - ETC.
 */
@SuppressWarnings({ "unused", "UnusedReturnValue" })
public class Differential {

    private final DoubleConsumer input1, input2;
    private double average = 0, deviation = 0;
    private double inputMin = -1, inputMax = 1;

    /**
     * Enum for the priority of the differential. This means that it will prioritize one of the
     * outputs over the other if the value for one of the outputs exceeds the limits.
     */
    public enum DifferentialPriority {
        NEUTRAL,
        AVERAGE,
        DIFFERENCE;

        /**
         * Calculates the value for the differential output generated by averaging
         * @param avg the average output for the diff
         * @param dif the deviation output for the diff
         * @param min the minimum value for the inputs
         * @param max the maximum value for the inputs
         * @return the value to set the input to
         */
        public double calculateA(double avg, double dif, double min, double max) {
            switch (this) {
                case AVERAGE:
                    if (avg - dif < min) dif = min - avg;
                    if (avg - dif > max) dif = avg - max;
                    break;
                case DIFFERENCE:
                    if (avg - dif < min) avg = dif - min;
                    if (avg - dif > max) avg = max - dif;
                    break;
            }
            return Range.clip(avg + dif, min, max);
        }

        /**
         * Calculates the value for the differential output generated by subtracting
         * @param avg the average output for the diff
         * @param dif the deviation output for the diff
         * @param min the minimum value for the inputs
         * @param max the maximum value for the inputs
         * @return the value to set the input to
         */
        public double calculateS(double avg, double dif, double min, double max) {
            switch (this) {
                case AVERAGE:
                    if (avg + dif < min) dif = min - avg;
                    if (avg + dif > max) dif = max - avg;
                    break;
                case DIFFERENCE:
                    if (avg + dif < min) avg = min - dif;
                    if (avg + dif > max) avg = max - dif;
                    break;
            }
            return Range.clip(avg - dif, min, max);
        }
    }

    private DifferentialPriority priority;

    /**
     * Create differential from two consumers
     * @param i1 consumer 1 (additive input)
     * @param i2 consumer 2 (subtractive input)
     */
    public Differential(DoubleConsumer i1, DoubleConsumer i2) {
        this(i1, i2, DifferentialPriority.NEUTRAL);
    }

    /**
     * Create differential from two consumers
     * @param i1 consumer 1 (additive input)
     * @param i2 consumer 2 (sutractiveb input)
     * @param p the differential {@link DifferentialPriority} to set the diff to
     */
    public Differential(DoubleConsumer i1, DoubleConsumer i2, DifferentialPriority p) {
        input1 = i1;
        input2 = i2;
        priority = p;
    }

    /**
     * Set the average of the differential.
     * This corresponds to whatever setting the two inputs
     * to the same direction will do
     * @param value the value to set
     * @return this
     */
    public Differential setAverageOutput(double value) {
        average = value;
        return updateOutputs();
    }

    /**
     * Set the deviation of the differential.
     * This corresponds to whatever setting the two nputs
     * to the opposite direction will do
     * @param value the value to set
     * @return this
     */
    public Differential setDeviationOutput(double value) {
        deviation = value;
        return updateOutputs();
    }

    /**
     * Set both outputs for the differential
     * @param aValue the average output
     * @param dValue the deviation output
     * @return this
     */
    public Differential setOutputs(double aValue, double dValue) {
        average = aValue;
        deviation = dValue;
        return updateOutputs();
    }

    private Differential updateOutputs() {
        input1.accept(priority.calculateA(average, deviation, inputMin, inputMax));
        input2.accept(priority.calculateS(average, deviation, inputMin, inputMax));
        return this;
    }

    /**
     * Gets the current average of the two differential inputs,
     * equating to one of the outputs
     * @return the current average
     */
    public double getAverage() {
        return average;
    }

    /**
     * Gets the current deviation between the two differential inputs and the average,
     * equating to one of the outputs
     * @return the current average
     */
    public double getDeviation() {
        return deviation;
    }

    /**
     * Gets the priority for the difference output.
     * @return The current {@link DifferentialPriority}
     */
    public DifferentialPriority getDifferentialPriority() {
        return priority;
    }

    /**
     * Sets the priority for the differential.
     * @param priority the new {@link DifferentialPriority}
     * @return this
     */
    public Differential setPriority(DifferentialPriority priority) {
        this.priority = priority;
        return updateOutputs();
    }

    /**
     * Set the limits for the differential
     * @param min the new minimum for the input
     * @param max the new maximum for the input
     * @return this
     */
    public Differential setLimits(double min, double max) {
        inputMin = min;
        inputMax = max;
        return updateOutputs();
    }
}
