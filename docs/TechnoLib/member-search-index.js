memberSearchIndex = [
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'a' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'A' },
  { p: 'com.technototes.library.util', c: 'SmartConsumer', l: 'accept(T)' },
  {
    p: 'com.technototes.library.command',
    c: 'CommandGroup',
    l: 'addCommands(Command...)',
    u: 'addCommands(com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'additionalInitConditions()' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'addRequirements(Subsystem...)',
    u: 'addRequirements(com.technototes.library.subsystem.Subsystem...)',
  },
  {
    p: 'com.technototes.library.hardware',
    c: 'Speaker',
    l: 'addSongs(String...)',
    u: 'addSongs(java.lang.String...)',
  },
  { p: 'com.technototes.library.control', c: 'Binding.Type', l: 'ALL_ACTIVE' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'alongWith(Command...)',
    u: 'alongWith(com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'alpha()' },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'analog(int)' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'analog(String)',
    u: 'analog(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'AnalogBuilder',
    l: 'AnalogBuilder(AnalogSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.AnalogSensor)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'AnalogBuilder',
    l: 'AnalogBuilder(int)',
    u: '%3Cinit%3E(int)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'AnalogBuilder',
    l: 'AnalogBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'AnalogSensor',
    l: 'AnalogSensor(AnalogInput)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.AnalogInput)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'AnalogSensor',
    l: 'AnalogSensor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'andThen(Command...)',
    u: 'andThen(com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'anyCancelled' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'apply(UnaryOperator<T>)',
    u: 'apply(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'TankDrivebaseSubsystem',
    l: 'arcadeDrive(double, double)',
    u: 'arcadeDrive(double,double)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'ColorDistanceSensor', l: 'argb()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'ColorSensor', l: 'argb()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'argb()' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'asConditional(BooleanSupplier)',
    u: 'asConditional(java.util.function.BooleanSupplier)',
  },
  { p: 'com.technototes.library.hardware2', c: 'ServoBuilder', l: 'at(double)' },
  { p: 'com.technototes.library.util', c: 'Differential.DifferentialPriority', l: 'AVERAGE' },
  {
    p: 'com.technototes.library.control',
    c: 'AxisBase',
    l: 'AxisBase(DoubleSupplier)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'AxisBase',
    l: 'AxisBase(DoubleSupplier, double)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier,double)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'axisInstance(DoubleSupplier)',
    u: 'axisInstance(java.util.function.DoubleSupplier)',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'b' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'B' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'back' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'BACK' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'BLACK' },
  { p: 'com.technototes.library.util', c: 'Alliance', l: 'BLUE' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'BLUE' },
  { p: 'com.technototes.library.util', c: 'Characters', l: 'BLUE_CIRCLE' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'blue()' },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'BooleanEntry',
    l: 'BooleanEntry(String, Supplier<Boolean>, int, String, String, Color, String, String, Color, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,java.lang.String,java.lang.String,com.technototes.library.util.Color,java.lang.String,java.lang.String,com.technototes.library.util.Color,com.technototes.library.util.Color)',
  },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'booleanSupplier' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'brake()' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'brake()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'brake()' },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'build()' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder', l: 'build()' },
  {
    p: 'com.technototes.library.control',
    c: 'ButtonBase',
    l: 'ButtonBase(BooleanSupplier)',
    u: '%3Cinit%3E(java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'buttonInstance(BooleanSupplier)',
    u: 'buttonInstance(java.util.function.BooleanSupplier)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'bVal' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'bVal' },
  {
    p: 'com.technototes.library.util',
    c: 'Differential.DifferentialPriority',
    l: 'calculateA(double, double, double, double)',
    u: 'calculateA(double,double,double,double)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Differential.DifferentialPriority',
    l: 'calculateS(double, double, double, double)',
    u: 'calculateS(double,double,double,double)',
  },
  { p: 'com.technototes.library.command', c: 'Command', l: 'cancel()' },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'CANCELLED' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'cancelUpon(BooleanSupplier)',
    u: 'cancelUpon(java.util.function.BooleanSupplier)',
  },
  { p: 'com.technototes.library.logger', c: 'Logger', l: 'captionDivider' },
  { p: 'com.technototes.library.util', c: 'Characters', l: 'Characters()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.library.command',
    c: 'ChoiceCommand',
    l: 'ChoiceCommand(BooleanSupplier, Command)',
    u: '%3Cinit%3E(java.util.function.BooleanSupplier,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ChoiceCommand',
    l: 'ChoiceCommand(Pair<BooleanSupplier, Command>...)',
    u: '%3Cinit%3E(android.util.Pair...)',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'circle' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'CIRCLE' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'clear()' },
  { p: 'com.technototes.library.hardware', c: 'DummyDevice', l: 'close()' },
  {
    p: 'com.technototes.library.util',
    c: 'MathUtils',
    l: 'closestTo(double, double...)',
    u: 'closestTo(double,double...)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'MathUtils',
    l: 'closestTo(double, int...)',
    u: 'closestTo(double,int...)',
  },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'coast()' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'coast()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'coast()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'codriverGamepad' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'color' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'color()' },
  { p: 'com.technototes.library.logger', c: 'Log', l: 'color()' },
  { p: 'com.technototes.library.logger', c: 'Log.Number', l: 'color()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'color()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'color()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'color(String)',
    u: 'color(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ColorBuilder',
    l: 'ColorBuilder(ColorSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.ColorSensor)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ColorBuilder',
    l: 'ColorBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'ColorDistanceSensor',
    l: 'ColorDistanceSensor(ColorRangeSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.ColorRangeSensor)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'ColorDistanceSensor',
    l: 'ColorDistanceSensor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'colorRange(String)',
    u: 'colorRange(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ColorRangeBuilder',
    l: 'ColorRangeBuilder(ColorRangeSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.ColorRangeSensor)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ColorRangeBuilder',
    l: 'ColorRangeBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'ColorSensor',
    l: 'ColorSensor(ColorSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.ColorSensor)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'ColorSensor',
    l: 'ColorSensor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandAxis',
    l: 'CommandAxis(DoubleSupplier)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandAxis',
    l: 'CommandAxis(DoubleSupplier, double)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier,double)',
  },
  { p: 'com.technototes.library.command', c: 'CommandBase', l: 'CommandBase()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.library.control',
    c: 'CommandBinding',
    l: 'CommandBinding(Binding.Type, CommandInput...)',
    u: '%3Cinit%3E(com.technototes.library.control.Binding.Type,com.technototes.library.control.CommandInput...)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandBinding',
    l: 'CommandBinding(CommandInput...)',
    u: '%3Cinit%3E(com.technototes.library.control.CommandInput...)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandButton',
    l: 'CommandButton(BooleanSupplier)',
    u: '%3Cinit%3E(java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'CommandGamepad(Gamepad)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.Gamepad)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandGroup',
    l: 'CommandGroup(boolean, Command...)',
    u: '%3Cinit%3E(boolean,com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'commandMap' },
  {
    p: 'com.technototes.library.structure',
    c: 'CommandOpMode',
    l: 'CommandOpMode()',
    u: '%3Cinit%3E()',
  },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'completeBarColor()' },
  {
    p: 'com.technototes.library.command',
    c: 'ConditionalCommand',
    l: 'ConditionalCommand(BooleanSupplier)',
    u: '%3Cinit%3E(java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ConditionalCommand',
    l: 'ConditionalCommand(BooleanSupplier, Command)',
    u: '%3Cinit%3E(java.util.function.BooleanSupplier,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ConditionalCommand',
    l: 'ConditionalCommand(BooleanSupplier, Command, Command)',
    u: '%3Cinit%3E(java.util.function.BooleanSupplier,com.technototes.library.command.Command,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'MathUtils',
    l: 'constrain(double, double, double)',
    u: 'constrain(double,double,double)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'MathUtils',
    l: 'constrain(int, int, int)',
    u: 'constrain(int,int,int)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler.Constraints',
    l: 'Constraints(double, double, double)',
    u: '%3Cinit%3E(double,double,double)',
  },
  { p: 'com.technototes.library.util', c: 'SmartConsumer', l: 'consume(T)' },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'countCancel' },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'countCancel()' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'create(Command, Subsystem...)',
    u: 'create(com.technototes.library.command.Command,com.technototes.library.subsystem.Subsystem...)',
  },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'create(int)' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'create(String)',
    u: 'create(java.lang.String)',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'cross' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'CROSS' },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'crServo(int)' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'crServo(String)',
    u: 'crServo(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'CRServoBuilder',
    l: 'CRServoBuilder(CRServo)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.CRServo)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'CRServoBuilder',
    l: 'CRServoBuilder(int)',
    u: '%3Cinit%3E(int)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'CRServoBuilder',
    l: 'CRServoBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.library.util', c: 'Color', l: 'CYAN' },
  { p: 'com.technototes.library.util', c: 'Characters', l: 'CYCLE' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'DARK_GRAY' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'deadline(Command...)',
    u: 'deadline(com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.control', c: 'AxisBase', l: 'DEFAULT_TRIGGER_THRESHOLD' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'degrees()' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder', l: 'degrees()' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDevice', l: 'device' },
  { p: 'com.technototes.library.subsystem', c: 'DeviceSubsystem', l: 'device' },
  {
    p: 'com.technototes.library.subsystem',
    c: 'DeviceSubsystem',
    l: 'DeviceSubsystem(T)',
    u: '%3Cinit%3E(T)',
  },
  { p: 'com.technototes.library.util', c: 'Differential.DifferentialPriority', l: 'DIFFERENCE' },
  {
    p: 'com.technototes.library.util',
    c: 'Differential',
    l: 'Differential(DoubleConsumer, DoubleConsumer)',
    u: '%3Cinit%3E(java.util.function.DoubleConsumer,java.util.function.DoubleConsumer)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Differential',
    l: 'Differential(DoubleConsumer, DoubleConsumer, Differential.DifferentialPriority)',
    u: '%3Cinit%3E(java.util.function.DoubleConsumer,java.util.function.DoubleConsumer,com.technototes.library.util.Differential.DifferentialPriority)',
  },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'digital(int)' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'digital(String)',
    u: 'digital(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'DigitalBuilder',
    l: 'DigitalBuilder(DigitalChannel)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DigitalChannel)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'DigitalBuilder',
    l: 'DigitalBuilder(int)',
    u: '%3Cinit%3E(int)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'DigitalBuilder',
    l: 'DigitalBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'DigitalSensor',
    l: 'DigitalSensor(DigitalChannel)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DigitalChannel)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'DigitalSensor',
    l: 'DigitalSensor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'CRServoBuilder',
    l: 'direction(DcMotorSimple.Direction)',
    u: 'direction(com.qualcomm.robotcore.hardware.DcMotorSimple.Direction)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'direction(DcMotorSimple.Direction)',
    u: 'direction(com.qualcomm.robotcore.hardware.DcMotorSimple.Direction)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ServoBuilder',
    l: 'direction(Servo.Direction)',
    u: 'direction(com.qualcomm.robotcore.hardware.Servo.Direction)',
  },
  { p: 'com.technototes.library.control', c: 'CommandGamepad', l: 'disable()' },
  { p: 'com.technototes.library.general', c: 'Enablable', l: 'disable()' },
  { p: 'com.technototes.library.hardware2', c: 'ColorRangeBuilder', l: 'disable()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'disable()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'distance(String)',
    u: 'distance(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'DistanceBuilder',
    l: 'DistanceBuilder(DistanceSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DistanceSensor)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'DistanceBuilder',
    l: 'DistanceBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.library.control', c: 'AxisBase', l: 'doubleSupplier' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'down' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'dpad' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'dpadDown' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'dpadLeft' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'dpadRight' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'dpadUp' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'TankDrivebaseSubsystem',
    l: 'drive(double, double)',
    u: 'drive(double,double)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'drive(double, double, double)',
    u: 'drive(double,double,double)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'drive(double, double, double, double)',
    u: 'drive(double,double,double,double)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'DrivebaseSubsystem',
    l: 'DrivebaseSubsystem(DoubleSupplier, Motor<T>...)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier,com.technototes.library.hardware.motor.Motor...)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'DrivebaseSubsystem',
    l: 'DrivebaseSubsystem(Motor<T>...)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.Motor...)',
  },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'driverGamepad' },
  { p: 'com.technototes.library.util', c: 'Characters', l: 'DUCK' },
  {
    p: 'com.technototes.library.hardware',
    c: 'DummyDevice',
    l: 'DummyDevice(T)',
    u: '%3Cinit%3E(T)',
  },
  { p: 'com.technototes.library.logger', c: 'LogConfig.Run', l: 'duringInit()' },
  { p: 'com.technototes.library.logger', c: 'LogConfig.Run', l: 'duringRun()' },
  { p: 'com.technototes.library.control', c: 'CommandGamepad', l: 'enable()' },
  { p: 'com.technototes.library.general', c: 'Enablable', l: 'enable()' },
  { p: 'com.technototes.library.hardware2', c: 'ColorRangeBuilder', l: 'enable()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'enable()' },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'EncodedMotor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'EncodedMotor(String, Encoder)',
    u: '%3Cinit%3E(java.lang.String,com.technototes.library.hardware.sensor.encoder.Encoder)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'EncodedMotor(T)',
    u: '%3Cinit%3E(T)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'EncodedMotor(T, Encoder)',
    u: '%3Cinit%3E(T,com.technototes.library.hardware.sensor.encoder.Encoder)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotorGroup',
    l: 'EncodedMotorGroup(EncodedMotor<T>, Motor<T>...)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.Motor...)',
  },
  {
    p: 'com.technototes.library.subsystem.motor',
    c: 'EncodedMotorSubsystem',
    l: 'EncodedMotorSubsystem(EncodedMotor<?>)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.EncodedMotor)',
  },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode.OpModeState', l: 'END' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'end()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'end(boolean)' },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'end(boolean)' },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'Entry',
    l: 'Entry(String, Supplier<T>, int, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,com.technototes.library.util.Color)',
  },
  { p: 'com.technototes.library.logger', c: 'Log', l: 'entryColor()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'execute()' },
  { p: 'com.technototes.library.command', c: 'CommandBase', l: 'execute()' },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'execute()' },
  { p: 'com.technototes.library.command', c: 'ConditionalCommand', l: 'execute()' },
  { p: 'com.technototes.library.command', c: 'WaitCommand', l: 'execute()' },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'EXECUTING' },
  { p: 'com.technototes.library.hardware2', c: 'ServoBuilder', l: 'expandedPWM()' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'expandedRange()' },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'ExternalEncoder',
    l: 'ExternalEncoder(AnalogInput)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.AnalogInput)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'ExternalEncoder',
    l: 'ExternalEncoder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'falseColor()' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'falseFormat()' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'falseValue()' },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'FINISHED' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'flMotor',
  },
  { p: 'com.technototes.library.logger', c: 'Log', l: 'format()' },
  {
    p: 'com.technototes.library.util',
    c: 'Color',
    l: 'format(Object)',
    u: 'format(java.lang.Object)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Color',
    l: 'format(String, Object...)',
    u: 'format(java.lang.String,java.lang.Object...)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder.Direction',
    l: 'FORWARD',
  },
  { p: 'com.technototes.library.hardware2', c: 'CRServoBuilder', l: 'forward()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'forward()' },
  { p: 'com.technototes.library.hardware2', c: 'ServoBuilder', l: 'forward()' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'frMotor',
  },
  { p: 'com.technototes.library.hardware2', c: 'ColorRangeBuilder', l: 'gain(float)' },
  { p: 'com.technototes.library.util', c: 'Characters', l: 'GAMEPAD' },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'GamepadBase(Gamepad, Class<T>, Class<U>)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.Gamepad,java.lang.Class,java.lang.Class)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadDpad',
    l: 'GamepadDpad(T, T, T, T)',
    u: '%3Cinit%3E(T,T,T,T)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadStick',
    l: 'GamepadStick(T, T, U)',
    u: '%3Cinit%3E(T,T,U)',
  },
  { p: 'com.technototes.library.command', c: 'Command', l: 'get()' },
  { p: 'com.technototes.library.control', c: 'Binding', l: 'get()' },
  { p: 'com.technototes.library.hardware', c: 'DummyDevice', l: 'get()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'get()' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'get()' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'get()' },
  {
    p: 'com.technototes.library.control',
    c: 'Binding',
    l: 'get(Binding.Type)',
    u: 'get(com.technototes.library.control.Binding.Type)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Alliance',
    l: 'get(Class<? extends OpMode>)',
    u: 'get(java.lang.Class)',
  },
  { p: 'com.technototes.library.hardware', c: 'HardwareDeviceGroup', l: 'getAllDeviceList()' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDeviceGroup', l: 'getAllDevices()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotorGroup', l: 'getAllDevices()' },
  { p: 'com.technototes.library.hardware.motor', c: 'MotorGroup', l: 'getAllDevices()' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoGroup', l: 'getAllDevices()' },
  { p: 'com.technototes.library.control', c: 'Stick', l: 'getAngle()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'getAngularOrientation()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'getAngularVelocity()' },
  { p: 'com.technototes.library.control', c: 'Binding', l: 'getAsBoolean()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'getAsBoolean()' },
  { p: 'com.technototes.library.control', c: 'CommandAxis', l: 'getAsButton()' },
  { p: 'com.technototes.library.control', c: 'CommandAxis', l: 'getAsButton(double)' },
  { p: 'com.technototes.library.control', c: 'AxisBase', l: 'getAsDouble()' },
  { p: 'com.technototes.library.hardware', c: 'Sensored', l: 'getAsDouble()' },
  { p: 'com.technototes.library.util', c: 'Differential', l: 'getAverage()' },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'getAxis(GamepadBase.Axis)',
    u: 'getAxis(com.technototes.library.control.GamepadBase.Axis)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'getAxisAsBoolean(GamepadBase.Axis)',
    u: 'getAxisAsBoolean(com.technototes.library.control.GamepadBase.Axis)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'getAxisAsDouble(GamepadBase.Axis)',
    u: 'getAxisAsDouble(com.technototes.library.control.GamepadBase.Axis)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'getButton(GamepadBase.Button)',
    u: 'getButton(com.technototes.library.control.GamepadBase.Button)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase',
    l: 'getButtonAsBoolean(GamepadBase.Button)',
    u: 'getButtonAsBoolean(com.technototes.library.control.GamepadBase.Button)',
  },
  { p: 'com.technototes.library.util', c: 'Alliance', l: 'getColor()' },
  { p: 'com.technototes.library.hardware', c: 'DummyDevice', l: 'getConnectionInfo()' },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'getCorrectedVelocity()',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'getCurrent(Subsystem)',
    u: 'getCurrent(com.technototes.library.subsystem.Subsystem)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'getCurrentPosition()',
  },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'getCurrentPosition()' },
  { p: 'com.technototes.library.hardware', c: 'Speaker', l: 'getCurrentSong()' },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'getDefault(Subsystem)',
    u: 'getDefault(com.technototes.library.subsystem.Subsystem)',
  },
  { p: 'com.technototes.library.subsystem', c: 'Subsystem', l: 'getDefaultCommand()' },
  { p: 'com.technototes.library.control', c: 'Binding', l: 'getDefaultType()' },
  { p: 'com.technototes.library.control', c: 'CommandBinding', l: 'getDefaultType()' },
  { p: 'com.technototes.library.util', c: 'Differential', l: 'getDeviation()' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDevice', l: 'getDevice()' },
  { p: 'com.technototes.library.subsystem', c: 'DeviceSubsystem', l: 'getDevice()' },
  { p: 'com.technototes.library.hardware', c: 'DummyDevice', l: 'getDeviceName()' },
  { p: 'com.technototes.library.util', c: 'Differential', l: 'getDifferentialPriority()' },
  { p: 'com.technototes.library.hardware.sensor.encoder', c: 'MotorEncoder', l: 'getDirection()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IDistanceSensor', l: 'getDistance()' },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'ColorDistanceSensor',
    l: 'getDistance(DistanceUnit)',
    u: 'getDistance(org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IDistanceSensor',
    l: 'getDistance(DistanceUnit)',
    u: 'getDistance(org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'Rev2MDistanceSensor',
    l: 'getDistance(DistanceUnit)',
    u: 'getDistance(org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit)',
  },
  { p: 'com.technototes.library.control', c: 'Stick', l: 'getDistanceFromCenter()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'getDouble()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'getDpad()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'getEncoder()' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDeviceGroup', l: 'getFollowerist()' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDeviceGroup', l: 'getFollowers()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotorGroup', l: 'getFollowers()' },
  { p: 'com.technototes.library.hardware.motor', c: 'MotorGroup', l: 'getFollowers()' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoGroup', l: 'getFollowers()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'getGamepad()' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'DrivebaseSubsystem', l: 'getGyro()' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'getHexValue()' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'getIndex()' },
  { p: 'com.technototes.library.command', c: 'CommandScheduler', l: 'getInstance()' },
  { p: 'com.technototes.library.control', c: 'CommandAxis', l: 'getInstance()' },
  { p: 'com.technototes.library.control', c: 'CommandButton', l: 'getInstance()' },
  { p: 'com.technototes.library.control', c: 'CommandInput', l: 'getInstance()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'getInverted()' },
  { p: 'com.technototes.library.general', c: 'Invertable', l: 'getInverted()' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'getInverted()' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'getInverted()' },
  { p: 'com.technototes.library.util', c: 'SmartConsumer', l: 'getLast()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'getLeftStick()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'ColorDistanceSensor', l: 'getLight()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'getLogger()' },
  { p: 'com.technototes.library.hardware', c: 'DummyDevice', l: 'getManufacturer()' },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'getMap()' },
  { p: 'com.technototes.library.util', c: 'MathUtils', l: 'getMax(double...)' },
  { p: 'com.technototes.library.util', c: 'MathUtils', l: 'getMax(int...)' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'getMaxAccel()' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler.Constraints',
    l: 'getMaxAcceleration()',
  },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'getMaxVel()' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler.Constraints',
    l: 'getMaxVelocity()',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder.Direction',
    l: 'getMultiplier()',
  },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'getName()' },
  { p: 'com.technototes.library.command', c: 'CommandScheduler', l: 'getOpModeRuntime()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'getOpModeRuntime()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'getOpModeState()' },
  { p: 'com.technototes.library.hardware.sensor.encoder', c: 'Encoder', l: 'getPosition()' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'getPosition()' },
  { p: 'com.technototes.library.subsystem.servo', c: 'ServoSubsystem', l: 'getPosition()' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'getPriority()' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler.Constraints',
    l: 'getProportion()',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'getRawVelocity()',
  },
  { p: 'com.technototes.library.command', c: 'Command', l: 'getRequirements()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'getRightStick()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'getRuntime()' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'DrivebaseSubsystem',
    l: 'getScale(double...)',
  },
  { p: 'com.technototes.library.command', c: 'WaitCommand', l: 'getSeconds()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'getSensorValue()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'AnalogSensor', l: 'getSensorValue()' },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'ExternalEncoder',
    l: 'getSensorValue()',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'getSensorValue()',
  },
  { p: 'com.technototes.library.hardware', c: 'Sensored', l: 'getSensorValue()' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'getSensorValue()' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'getServo()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'getSpeed()' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'getSpeed()' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'DrivebaseSubsystem', l: 'getSpeed()' },
  { p: 'com.technototes.library.subsystem.motor', c: 'MotorSubsystem', l: 'getSpeed()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'getState()' },
  { p: 'com.technototes.library.control', c: 'Binding', l: 'getSuppliers()' },
  { p: 'com.technototes.library.control', c: 'CommandBinding', l: 'getSuppliers()' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'getTag()' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'getTargetPosition()' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'getTargetTolerance()' },
  { p: 'com.technototes.library.control', c: 'AxisBase', l: 'getTriggerThreshold()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'ColorDistanceSensor', l: 'getUnit()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IDistanceSensor', l: 'getUnit()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'Rev2MDistanceSensor', l: 'getUnit()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'DigitalSensor', l: 'getValue()' },
  { p: 'com.technototes.library.util', c: 'Integral', l: 'getValue()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'getVelocity()' },
  { p: 'com.technototes.library.hardware', c: 'DummyDevice', l: 'getVersion()' },
  { p: 'com.technototes.library', c: 'RobotLibrary', l: 'getVersion()' },
  { p: 'com.technototes.library.hardware', c: 'Speaker', l: 'getVolume()' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'getXAxis()' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'getXAxis()' },
  { p: 'com.technototes.library.control', c: 'Stick', l: 'getXAxis()' },
  { p: 'com.technototes.library.control', c: 'Stick', l: 'getXSupplier()' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'getYAxis()' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'getYAxis()' },
  { p: 'com.technototes.library.control', c: 'Stick', l: 'getYAxis()' },
  { p: 'com.technototes.library.control', c: 'Stick', l: 'getYSupplier()' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'GREEN' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'green()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IGyro', l: 'gyroHeading()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'gyroHeading()' },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IMU',
    l: 'gyroHeading(AngleUnit)',
    u: 'gyroHeading(org.firstinspires.ftc.robotcore.external.navigation.AngleUnit)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'IGyro', l: 'gyroHeadingInDegrees()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'gyroHeadingInDegrees()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IGyro', l: 'gyroHeadingInRadians()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'gyroHeadingInRadians()' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'DrivebaseSubsystem', l: 'gyroSupplier' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'HardwareBuilder(int)',
    u: '%3Cinit%3E(int)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'HardwareBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'HardwareBuilder(T)',
    u: '%3Cinit%3E(T)',
  },
  {
    p: 'com.technototes.library.hardware',
    c: 'HardwareDevice',
    l: 'HardwareDevice(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware',
    c: 'HardwareDevice',
    l: 'HardwareDevice(T)',
    u: '%3Cinit%3E(T)',
  },
  { p: 'com.technototes.library.hardware', c: 'HardwareDevice', l: 'hardwareMap' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'hsv()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'hsvArray()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'hue()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'idle(DcMotor.ZeroPowerBehavior)',
    u: 'idle(com.qualcomm.robotcore.hardware.DcMotor.ZeroPowerBehavior)',
  },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'ignoreCancel()' },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IMU',
    l: 'IMU(BNO055IMUImpl)',
    u: '%3Cinit%3E(com.qualcomm.hardware.bosch.BNO055IMUImpl)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'imu(String)',
    u: 'imu(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IMU',
    l: 'IMU(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'IMUBuilder',
    l: 'IMUBuilder(BNO055IMUImpl)',
    u: '%3Cinit%3E(com.qualcomm.hardware.bosch.BNO055IMUImpl)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'IMUBuilder',
    l: 'IMUBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'incompleteBarColor()' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'incrementPosition(double)' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'index()' },
  { p: 'com.technototes.library.logger', c: 'Log', l: 'index()' },
  { p: 'com.technototes.library.logger', c: 'Log.Number', l: 'index()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'index()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'index()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode.OpModeState', l: 'INIT' },
  { p: 'com.technototes.library.logger', c: 'Logger', l: 'initEntries' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'initialize()' },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'initialize()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'initialize()' },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'INITIALIZING' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'initLoop()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'initMap(HardwareMap)',
    u: 'initMap(com.qualcomm.robotcore.hardware.HardwareMap)',
  },
  { p: 'com.technototes.library.logger', c: 'Logger', l: 'initUpdate()' },
  { p: 'com.technototes.library.hardware2', c: 'DigitalBuilder', l: 'input()' },
  { p: 'com.technototes.library.util', c: 'Range', l: 'inRange(double)' },
  { p: 'com.technototes.library.util', c: 'Integral', l: 'Integral()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.library.util',
    c: 'Integral',
    l: 'Integral(double)',
    u: '%3Cinit%3E(double)',
  },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'INTERRUPTED' },
  { p: 'com.technototes.library.general', c: 'Invertable', l: 'invert()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'invert()' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'invert()' },
  { p: 'com.technototes.library.hardware.sensor.encoder', c: 'MotorEncoder', l: 'invert()' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'isAtPosition(double)' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'isAtTarget()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'isCancelled()' },
  { p: 'com.technototes.library.general', c: 'Enablable', l: 'isDisabled()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isEnabled()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'isEnabled()' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'isEnabled()' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'isEnabled()' },
  { p: 'com.technototes.library.general', c: 'Enablable', l: 'isEnabled()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'CommandBase', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'CommandGroup', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'ConditionalCommand', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'ParallelCommandGroup', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'ParallelDeadlineGroup', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'ParallelRaceGroup', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'SequentialCommandGroup', l: 'isFinished()' },
  { p: 'com.technototes.library.command', c: 'WaitCommand', l: 'isFinished()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isInverseToggled()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isJustInverseToggled()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isJustPressed()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isJustReleased()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isJustToggled()' },
  { p: 'com.technototes.library', c: 'RobotLibrary', l: 'isPreRelease()' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isPressed()' },
  { p: 'com.technototes.library.util', c: 'MathUtils', l: 'isPrime(int)' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isReleased()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'isRumbling()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'isRunning()' },
  {
    p: 'com.technototes.library.structure',
    c: 'CommandOpMode.OpModeState',
    l: 'isState(CommandOpMode.OpModeState...)',
    u: 'isState(com.technototes.library.structure.CommandOpMode.OpModeState...)',
  },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'isToggled()' },
  {
    p: 'com.technototes.library.command',
    c: 'IterativeCommand',
    l: 'IterativeCommand(Function<Integer, Command>, BooleanSupplier)',
    u: '%3Cinit%3E(java.util.function.Function,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'IterativeCommand',
    l: 'IterativeCommand(Function<Integer, Command>, int)',
    u: '%3Cinit%3E(java.util.function.Function,int)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'IterativeCommand',
    l: 'IterativeCommand(Function<Integer, Command>, int, BooleanSupplier)',
    u: '%3Cinit%3E(java.util.function.Function,int,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'IterativeCommand',
    l: 'IterativeCommand(Function<T, Command>, T, T, Function<T, T>)',
    u: '%3Cinit%3E(java.util.function.Function,T,T,java.util.function.Function)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'IterativeCommand',
    l: 'IterativeCommand(Function<T, Command>, T, T, Function<T, T>, BooleanSupplier)',
    u: '%3Cinit%3E(java.util.function.Function,T,T,java.util.function.Function,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'joystickDrive(double, double, double)',
    u: 'joystickDrive(double,double,double)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'joystickDriveWithGyro(double, double, double, double)',
    u: 'joystickDriveWithGyro(double,double,double,double)',
  },
  { p: 'com.technototes.library.command', c: 'Command', l: 'justFinished()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'justFinishedNoCancel()' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'justStarted()' },
  { p: 'com.technototes.library.command', c: 'SequentialCommandGroup', l: 'lastCommand' },
  { p: 'com.technototes.library.hardware2', c: 'ColorRangeBuilder', l: 'led(boolean)' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'left' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'LEFT_BUMPER' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'LEFT_STICK_BUTTON' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'LEFT_STICK_X' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'LEFT_STICK_Y' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'LEFT_TRIGGER' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'leftBumper' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'TankDrivebaseSubsystem', l: 'leftSide' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'leftStick' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'leftStickButton' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'leftStickX' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'leftStickY' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'leftTrigger' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'LIGHT_GRAY' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'LIME' },
  {
    p: 'com.technototes.library.logger',
    c: 'Logger',
    l: 'Logger(OpMode)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.eventloop.opmode.OpMode)',
  },
  { p: 'com.technototes.library.util', c: 'Color', l: 'MAGENTA' },
  { p: 'com.technototes.library.util', c: 'SmartConsumer', l: 'map' },
  {
    p: 'com.technototes.library.util',
    c: 'MathUtils',
    l: 'map(double, double, double, double, double)',
    u: 'map(double,double,double,double,double)',
  },
  { p: 'com.technototes.library.util', c: 'MapUtils', l: 'MapUtils()', u: '%3Cinit%3E()' },
  { p: 'com.technototes.library.util', c: 'MathUtils', l: 'MathUtils()', u: '%3Cinit%3E()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'max' },
  { p: 'com.technototes.library.util', c: 'Range', l: 'max' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'max()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'max()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'max()' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler.Constraints',
    l: 'maxAcceleration',
  },
  { p: 'com.technototes.library.subsystem.motor', c: 'EncodedMotorSubsystem', l: 'maxSpeed' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler.Constraints', l: 'maxVelocity' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'MecanumDrivebaseSubsystem(DoubleSupplier, Motor<T>, Motor<T>, Motor<T>, Motor<T>)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier,com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor)',
  },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'MecanumDrivebaseSubsystem(Motor<T>, Motor<T>, Motor<T>, Motor<T>)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor)',
  },
  { p: 'com.technototes.library.util', c: 'Range', l: 'middle()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'min' },
  { p: 'com.technototes.library.util', c: 'Range', l: 'min' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'min()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'min()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'min()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'mode(DcMotor.RunMode)',
    u: 'mode(com.qualcomm.robotcore.hardware.DcMotor.RunMode)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'DigitalBuilder',
    l: 'mode(DigitalChannel.Mode)',
    u: 'mode(com.qualcomm.robotcore.hardware.DigitalChannel.Mode)',
  },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'motor(int)' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'motor(String)',
    u: 'motor(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'Motor',
    l: 'Motor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'Motor(T)', u: '%3Cinit%3E(T)' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'MotorBuilder(DcMotorEx)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DcMotorEx)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'MotorBuilder(int)',
    u: '%3Cinit%3E(int)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'MotorBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'MotorEncoder(DcMotorEx)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DcMotorEx)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'MotorEncoder(DcMotorEx, ElapsedTime)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DcMotorEx,com.qualcomm.robotcore.util.ElapsedTime)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'MotorEncoder(EncodedMotor<DcMotorEx>)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.EncodedMotor)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'MotorEncoder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'MotorGroup',
    l: 'MotorGroup(Motor<T>...)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.Motor...)',
  },
  {
    p: 'com.technototes.library.subsystem.motor',
    c: 'MotorSubsystem',
    l: 'MotorSubsystem(T)',
    u: '%3Cinit%3E(T)',
  },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'name' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'name()' },
  { p: 'com.technototes.library.logger', c: 'Log', l: 'name()' },
  { p: 'com.technototes.library.logger', c: 'Log.Number', l: 'name()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'name()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'name()' },
  { p: 'com.technototes.library.util', c: 'Differential.DifferentialPriority', l: 'NEUTRAL' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'NNN' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'NNN' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'NNP' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'NNP' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'NO_COLOR' },
  { p: 'com.technototes.library.util', c: 'Alliance', l: 'NONE' },
  { p: 'com.technototes.library.control', c: 'Binding.Type', l: 'NONE_ACTIVE' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'NPN' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'NPN' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'NPP' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'NPP' },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'NumberBarEntry',
    l: 'NumberBarEntry(String, Supplier<Number>, int, Number, Number, Number, Color, Color, Color, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,java.lang.Number,java.lang.Number,java.lang.Number,com.technototes.library.util.Color,com.technototes.library.util.Color,com.technototes.library.util.Color,com.technototes.library.util.Color)',
  },
  { p: 'com.technototes.library.logger.entry', c: 'NumberEntry', l: 'numberColor' },
  { p: 'com.technototes.library.logger', c: 'Log.Number', l: 'numberColor()' },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'NumberEntry',
    l: 'NumberEntry(String, Supplier<Number>, int, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,com.technototes.library.util.Color)',
  },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'NumberEntry',
    l: 'NumberEntry(String, Supplier<Number>, int, Color, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,com.technototes.library.util.Color,com.technototes.library.util.Color)',
  },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'NumberSliderEntry',
    l: 'NumberSliderEntry(String, Supplier<Number>, int, Number, Number, Number, Color, Color, Color, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,java.lang.Number,java.lang.Number,java.lang.Number,com.technototes.library.util.Color,com.technototes.library.util.Color,com.technototes.library.util.Color,com.technototes.library.util.Color)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'MapUtils',
    l: 'of(Pair<T, U>...)',
    u: 'of(android.util.Pair...)',
  },
  { p: 'com.technototes.library.util', c: 'Alliance.Selector', l: 'of(T, T)', u: 'of(T,T)' },
  { p: 'com.technototes.library.hardware.sensor.encoder', c: 'MotorEncoder', l: 'offset' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'onlyIf(BooleanSupplier)',
    u: 'onlyIf(java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'Servo',
    l: 'onRange(double, double)',
    u: 'onRange(double,double)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'ColorDistanceSensor',
    l: 'onUnit(DistanceUnit)',
    u: 'onUnit(org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IDistanceSensor',
    l: 'onUnit(DistanceUnit)',
    u: 'onUnit(org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'Rev2MDistanceSensor',
    l: 'onUnit(DistanceUnit)',
    u: 'onUnit(org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit)',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'options' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'OPTIONS' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'ORANGE' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'outline()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'outline()' },
  { p: 'com.technototes.library.hardware2', c: 'DigitalBuilder', l: 'output()' },
  {
    p: 'com.technototes.library.command',
    c: 'ParallelCommandGroup',
    l: 'ParallelCommandGroup(Command...)',
    u: '%3Cinit%3E(com.technototes.library.command.Command...)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ParallelDeadlineGroup',
    l: 'ParallelDeadlineGroup(Command, Command...)',
    u: '%3Cinit%3E(com.technototes.library.command.Command,com.technototes.library.command.Command...)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ParallelRaceGroup',
    l: 'ParallelRaceGroup(Command...)',
    u: '%3Cinit%3E(com.technototes.library.command.Command...)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'IMUBuilder',
    l: 'parameter(Consumer<BNO055IMU.Parameters>)',
    u: 'parameter(java.util.function.Consumer)',
  },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'periodic()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'periodic()' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'periodic()' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'periodic()' },
  { p: 'com.technototes.library.general', c: 'Periodic', l: 'periodic()' },
  { p: 'com.technototes.library.subsystem', c: 'DeviceSubsystem', l: 'periodic()' },
  { p: 'com.technototes.library.subsystem', c: 'Subsystem', l: 'periodic()' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'PINK' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'PNN' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'PNN' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'PNP' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'PNP' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'position(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'positionThreshold' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'PPN' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'PPN' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'PPP' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'PPP' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'primary' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'priority' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'priority()' },
  { p: 'com.technototes.library.logger', c: 'Log.Number', l: 'priority()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'priority()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'priority()' },
  { p: 'com.technototes.library.logger', c: 'Log', l: 'priority()' },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'product' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDeviceGroup', l: 'propagate(double)' },
  { p: 'com.technototes.library.hardware', c: 'HardwareDeviceGroup', l: 'propogate(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotorGroup', l: 'propogate(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'MotorGroup', l: 'propogate(double)' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoGroup', l: 'propogate(double)' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler.Constraints', l: 'proportion' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'PURPLE' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ServoBuilder',
    l: 'pwmRange(double, double)',
    u: 'pwmRange(double,double)',
  },
  { p: 'com.technototes.library.util', c: 'MathUtils', l: 'pythag(double...)' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'raceWith(Command...)',
    u: 'raceWith(com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'radians()' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder', l: 'radians()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ServoBuilder',
    l: 'range(double, double)',
    u: 'range(double,double)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Range',
    l: 'Range(double, double)',
    u: '%3Cinit%3E(double,double)',
  },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'raw()' },
  { p: 'com.technototes.library.util', c: 'Alliance', l: 'RED' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'RED' },
  { p: 'com.technototes.library.util', c: 'Characters', l: 'RED_SQUARE' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'red()' },
  { p: 'com.technototes.library.subsystem', c: 'Subsystem', l: 'register()' },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'register(Periodic)',
    u: 'register(com.technototes.library.general.Periodic)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'IMUBuilder',
    l: 'remap(AxesOrder, IMUBuilder.AxesSigns)',
    u: 'remap(org.firstinspires.ftc.robotcore.external.navigation.AxesOrder,com.technototes.library.hardware2.IMUBuilder.AxesSigns)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IMU',
    l: 'remapAxes(AxesOrder, IMU.AxesSigns)',
    u: 'remapAxes(org.firstinspires.ftc.robotcore.external.navigation.AxesOrder,com.technototes.library.hardware.sensor.IMU.AxesSigns)',
  },
  {
    p: 'com.technototes.library.logger',
    c: 'Logger',
    l: 'repeat(String, int)',
    u: 'repeat(java.lang.String,int)',
  },
  { p: 'com.technototes.library.command', c: 'Command', l: 'requirementMap' },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'RESET' },
  { p: 'com.technototes.library.util', c: 'SmartConsumer', l: 'reset()' },
  {
    p: 'com.technototes.library.hardware',
    c: 'DummyDevice',
    l: 'resetDeviceConfigurationForOpMode()',
  },
  { p: 'com.technototes.library.command', c: 'CommandScheduler', l: 'resetScheduler()' },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'Rev2MDistanceSensor',
    l: 'Rev2MDistanceSensor(DistanceSensor)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.DistanceSensor)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'Rev2MDistanceSensor',
    l: 'Rev2MDistanceSensor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder.Direction',
    l: 'REVERSE',
  },
  { p: 'com.technototes.library.hardware2', c: 'CRServoBuilder', l: 'reverse()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'reverse()' },
  { p: 'com.technototes.library.hardware2', c: 'ServoBuilder', l: 'reverse()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'rgb()' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'right' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'RIGHT_BUMPER' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'RIGHT_STICK_BUTTON' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'RIGHT_STICK_X' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'RIGHT_STICK_Y' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'RIGHT_TRIGGER' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rightBumper' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'TankDrivebaseSubsystem', l: 'rightSide' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rightStick' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rightStickButton' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rightStickX' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rightStickY' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rightTrigger' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'rlMotor',
  },
  { p: 'com.technototes.library', c: 'RobotLibrary', l: 'RobotLibrary()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'MecanumDrivebaseSubsystem',
    l: 'rrMotor',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rumble()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rumble(double)' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rumbleBlip()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'rumbleBlips(int)' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode.OpModeState', l: 'RUN' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'run()' },
  { p: 'com.technototes.library.command', c: 'CommandScheduler', l: 'run()' },
  { p: 'com.technototes.library.logger', c: 'Logger', l: 'runEntries' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'runLoop()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'runOpMode()' },
  { p: 'com.technototes.library.logger', c: 'Logger', l: 'runUpdate()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'saturation()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'scale' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'scale()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberBar', l: 'scale()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'scale()' },
  { p: 'com.technototes.library.util', c: 'Range', l: 'scale(double)' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'Servo',
    l: 'scalePWM(double, double)',
    u: 'scalePWM(double,double)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'schedule(BooleanSupplier, Command)',
    u: 'schedule(java.util.function.BooleanSupplier,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandGroup',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ParallelCommandGroup',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ParallelDeadlineGroup',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'ParallelRaceGroup',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'SequentialCommandGroup',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'schedule(Command)',
    u: 'schedule(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'schedule(Command, BooleanSupplier)',
    u: 'schedule(com.technototes.library.command.Command,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandButton',
    l: 'schedule(Consumer<Boolean>)',
    u: 'schedule(java.util.function.Consumer)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandButton',
    l: 'schedule(Function<Boolean, Command>)',
    u: 'schedule(java.util.function.Function)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandAxis',
    l: 'schedule(Function<Double, Command>)',
    u: 'schedule(java.util.function.Function)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleAfterOther(Command, Command)',
    u: 'scheduleAfterOther(com.technototes.library.command.Command,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleAfterOther(Command, Command, BooleanSupplier)',
    u: 'scheduleAfterOther(com.technototes.library.command.Command,com.technototes.library.command.Command,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleDefault(Command, Subsystem)',
    u: 'scheduleDefault(com.technototes.library.command.Command,com.technototes.library.subsystem.Subsystem)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleDpad(BiConsumer<Double, Double>)',
    u: 'scheduleDpad(java.util.function.BiConsumer)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleDpad(BiFunction<Double, Double, Command>)',
    u: 'scheduleDpad(java.util.function.BiFunction)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleForState(Command, BooleanSupplier, CommandOpMode.OpModeState...)',
    u: 'scheduleForState(com.technototes.library.command.Command,java.util.function.BooleanSupplier,com.technototes.library.structure.CommandOpMode.OpModeState...)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleForState(Command, CommandOpMode.OpModeState...)',
    u: 'scheduleForState(com.technototes.library.command.Command,com.technototes.library.structure.CommandOpMode.OpModeState...)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleInit(Command)',
    u: 'scheduleInit(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleInit(Command, BooleanSupplier)',
    u: 'scheduleInit(com.technototes.library.command.Command,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleJoystick(Command)',
    u: 'scheduleJoystick(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleJoystick(Command, BooleanSupplier)',
    u: 'scheduleJoystick(com.technototes.library.command.Command,java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleLeftStick(BiConsumer<Double, Double>)',
    u: 'scheduleLeftStick(java.util.function.BiConsumer)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleLeftStick(BiFunction<Double, Double, Command>)',
    u: 'scheduleLeftStick(java.util.function.BiFunction)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleOnce(Command)',
    u: 'scheduleOnce(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleOnceForState(Command, CommandOpMode.OpModeState)',
    u: 'scheduleOnceForState(com.technototes.library.command.Command,com.technototes.library.structure.CommandOpMode.OpModeState)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandAxis',
    l: 'schedulePressed(Function<DoubleSupplier, Command>)',
    u: 'schedulePressed(java.util.function.Function)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleRightStick(BiConsumer<Double, Double>)',
    u: 'scheduleRightStick(java.util.function.BiConsumer)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleRightStick(BiFunction<Double, Double, Command>)',
    u: 'scheduleRightStick(java.util.function.BiFunction)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleStick(Stick, BiConsumer<Double, Double>)',
    u: 'scheduleStick(com.technototes.library.control.Stick,java.util.function.BiConsumer)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandGamepad',
    l: 'scheduleStick(Stick, BiFunction<Double, Double, Command>)',
    u: 'scheduleStick(com.technototes.library.control.Stick,java.util.function.BiFunction)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleWithOther(Command, Command)',
    u: 'scheduleWithOther(com.technototes.library.command.Command,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'scheduleWithOther(Command, Command, BooleanSupplier)',
    u: 'scheduleWithOther(com.technototes.library.command.Command,com.technototes.library.command.Command,java.util.function.BooleanSupplier)',
  },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'secondary' },
  {
    p: 'com.technototes.library.util',
    c: 'Alliance.Selector',
    l: 'select(Alliance)',
    u: 'select(com.technototes.library.util.Alliance)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Alliance.Selector',
    l: 'selectOf(Alliance, T, T)',
    u: 'selectOf(com.technototes.library.util.Alliance,T,T)',
  },
  { p: 'com.technototes.library.util', c: 'Alliance', l: 'selectOf(T, T)', u: 'selectOf(T,T)' },
  {
    p: 'com.technototes.library.util',
    c: 'Alliance.Selector',
    l: 'Selector(T, T)',
    u: '%3Cinit%3E(T,T)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'Sensor',
    l: 'Sensor(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'Sensor', l: 'Sensor(T)', u: '%3Cinit%3E(T)' },
  {
    p: 'com.technototes.library.command',
    c: 'SequentialCommandGroup',
    l: 'SequentialCommandGroup(Command...)',
    u: '%3Cinit%3E(com.technototes.library.command.Command...)',
  },
  { p: 'com.technototes.library.hardware2', c: 'HardwareBuilder', l: 'servo(int)' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'Servo',
    l: 'Servo(Servo)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.Servo)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'HardwareBuilder',
    l: 'servo(String)',
    u: 'servo(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'Servo',
    l: 'Servo(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ServoBuilder',
    l: 'ServoBuilder(int)',
    u: '%3Cinit%3E(int)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ServoBuilder',
    l: 'ServoBuilder(Servo)',
    u: '%3Cinit%3E(com.qualcomm.robotcore.hardware.Servo)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'ServoBuilder',
    l: 'ServoBuilder(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoGroup',
    l: 'ServoGroup(Servo...)',
    u: '%3Cinit%3E(com.technototes.library.hardware.servo.Servo...)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler',
    l: 'ServoProfiler(Servo)',
    u: '%3Cinit%3E(com.technototes.library.hardware.servo.Servo)',
  },
  {
    p: 'com.technototes.library.subsystem.servo',
    c: 'ServoSubsystem',
    l: 'ServoSubsystem(Servo)',
    u: '%3Cinit%3E(com.technototes.library.hardware.servo.Servo)',
  },
  {
    p: 'com.technototes.library.subsystem.servo',
    c: 'ServoSubsystem',
    l: 'ServoSubsystem(Servo...)',
    u: '%3Cinit%3E(com.technototes.library.hardware.servo.Servo...)',
  },
  { p: 'com.technototes.library.util', c: 'Integral', l: 'set(double)' },
  { p: 'com.technototes.library.util', c: 'Differential', l: 'setAverageOutput(double)' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler',
    l: 'setConstraints(double, double, double)',
    u: 'setConstraints(double,double,double)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler',
    l: 'setConstraints(ServoProfiler.Constraints)',
    u: 'setConstraints(com.technototes.library.hardware.servo.ServoProfiler.Constraints)',
  },
  {
    p: 'com.technototes.library.subsystem',
    c: 'Subsystem',
    l: 'setDefaultCommand(Command)',
    u: 'setDefaultCommand(com.technototes.library.command.Command)',
  },
  { p: 'com.technototes.library.util', c: 'Differential', l: 'setDeviationOutput(double)' },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder',
    l: 'setDirection(MotorEncoder.Direction)',
    u: 'setDirection(com.technototes.library.hardware.sensor.encoder.MotorEncoder.Direction)',
  },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'setEnabled(boolean)' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'setEnabled(boolean)' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'setEnabled(boolean)' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'setEnabled(boolean)' },
  { p: 'com.technototes.library.general', c: 'Enablable', l: 'setEnabled(boolean)' },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'setEncoder(Encoder)',
    u: 'setEncoder(com.technototes.library.hardware.sensor.encoder.Encoder)',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'IGyro', l: 'setHeading(double)' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU', l: 'setHeading(double)' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'setIndex(int)' },
  { p: 'com.technototes.library.control', c: 'ButtonBase', l: 'setInverted(boolean)' },
  { p: 'com.technototes.library.control', c: 'CommandAxis', l: 'setInverted(boolean)' },
  { p: 'com.technototes.library.control', c: 'CommandButton', l: 'setInverted(boolean)' },
  { p: 'com.technototes.library.general', c: 'Invertable', l: 'setInverted(boolean)' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'setInverted(boolean)' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'setInverted(boolean)' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'setInverted(boolean)' },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'setLimits(double, double)',
    u: 'setLimits(double,double)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'Motor',
    l: 'setLimits(double, double)',
    u: 'setLimits(double,double)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Differential',
    l: 'setLimits(double, double)',
    u: 'setLimits(double,double)',
  },
  {
    p: 'com.technototes.library.subsystem.motor',
    c: 'EncodedMotorSubsystem',
    l: 'setMaxSpeed(double)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'CommandScheduler',
    l: 'setOpMode(CommandOpMode)',
    u: 'setOpMode(com.technototes.library.structure.CommandOpMode)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Differential',
    l: 'setOutputs(double, double)',
    u: 'setOutputs(double,double)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'setPIDFCoeffecients(double, double, double, double)',
    u: 'setPIDFCoeffecients(double,double,double,double)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'setPIDFCoeffecients(PIDFCoefficients)',
    u: 'setPIDFCoeffecients(com.qualcomm.robotcore.hardware.PIDFCoefficients)',
  },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'setPosition(double)' },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'setPosition(double)' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoGroup', l: 'setPosition(double)' },
  {
    p: 'com.technototes.library.subsystem.motor',
    c: 'EncodedMotorSubsystem',
    l: 'setPosition(double)',
  },
  { p: 'com.technototes.library.subsystem.servo', c: 'ServoSubsystem', l: 'setPosition(double)' },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'setPosition(double, double)',
    u: 'setPosition(double,double)',
  },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotorGroup',
    l: 'setPosition(double, double)',
    u: 'setPosition(double,double)',
  },
  {
    p: 'com.technototes.library.subsystem.motor',
    c: 'EncodedMotorSubsystem',
    l: 'setPosition(double, double)',
    u: 'setPosition(double,double)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Differential',
    l: 'setPriority(Differential.DifferentialPriority)',
    u: 'setPriority(com.technototes.library.util.Differential.DifferentialPriority)',
  },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'setPriority(int)' },
  {
    p: 'com.technototes.library.hardware.motor',
    c: 'EncodedMotor',
    l: 'setRunMode(DcMotor.RunMode)',
    u: 'setRunMode(com.qualcomm.robotcore.hardware.DcMotor.RunMode)',
  },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'setServoRange(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'setSpeed(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'Motor', l: 'setSpeed(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'MotorGroup', l: 'setSpeed(double)' },
  { p: 'com.technototes.library.subsystem.motor', c: 'MotorSubsystem', l: 'setSpeed(double)' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'setState(Command.CommandState)',
    u: 'setState(com.technototes.library.command.Command.CommandState)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler',
    l: 'setTargetPosition(double)',
  },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler',
    l: 'setTargetTolerance(double)',
  },
  { p: 'com.technototes.library.control', c: 'AxisBase', l: 'setTriggerThreshold(double)' },
  { p: 'com.technototes.library.control', c: 'CommandAxis', l: 'setTriggerThreshold(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'setVelocity(double)' },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotorGroup', l: 'setVelocity(double)' },
  { p: 'com.technototes.library.hardware', c: 'Speaker', l: 'setVolume(float)' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'share' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'SHARE' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'sleep(double)' },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'sleep(DoubleSupplier)',
    u: 'sleep(java.util.function.DoubleSupplier)',
  },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'slider()' },
  { p: 'com.technototes.library.logger', c: 'Log.NumberSlider', l: 'sliderBackground()' },
  { p: 'com.technototes.library.control', c: 'Binding.Type', l: 'SOME_ACTIVE' },
  {
    p: 'com.technototes.library.hardware',
    c: 'Speaker',
    l: 'Speaker(float, String...)',
    u: '%3Cinit%3E(float,java.lang.String...)',
  },
  {
    p: 'com.technototes.library.hardware',
    c: 'Speaker',
    l: 'Speaker(String...)',
    u: '%3Cinit%3E(java.lang.String...)',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'square' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'SQUARE' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'start' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'START' },
  {
    p: 'com.technototes.library.hardware',
    c: 'Speaker',
    l: 'start(String)',
    u: 'start(java.lang.String)',
  },
  { p: 'com.technototes.library.hardware.servo', c: 'Servo', l: 'startAt(double)' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoGroup', l: 'startAt(double)' },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'STARTED' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'stateMap' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'stickButton' },
  { p: 'com.technototes.library.hardware', c: 'Speaker', l: 'stop()' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'MecanumDrivebaseSubsystem', l: 'stop()' },
  { p: 'com.technototes.library.subsystem.drivebase', c: 'TankDrivebaseSubsystem', l: 'stop()' },
  { p: 'com.technototes.library.subsystem.motor', c: 'MotorSubsystem', l: 'stop()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'stopRumble()' },
  {
    p: 'com.technototes.library.logger.entry',
    c: 'StringEntry',
    l: 'StringEntry(String, Supplier<String>, int, Color, String, Color)',
    u: '%3Cinit%3E(java.lang.String,java.util.function.Supplier,int,com.technototes.library.util.Color,java.lang.String,com.technototes.library.util.Color)',
  },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'supplier' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'tag' },
  {
    p: 'com.technototes.library.subsystem.drivebase',
    c: 'TankDrivebaseSubsystem',
    l: 'TankDrivebaseSubsystem(Motor<T>, Motor<T>)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.Motor,com.technototes.library.hardware.motor.Motor)',
  },
  { p: 'com.technototes.library.hardware.motor', c: 'EncodedMotor', l: 'tare()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'tare()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'terminate()' },
  { p: 'com.technototes.library.command', c: 'CommandScheduler', l: 'terminateOpMode()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'tertiary' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'timeMap' },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'toggle(Command, Command)',
    u: 'toggle(com.technototes.library.command.Command,com.technototes.library.command.Command)',
  },
  { p: 'com.technototes.library.general', c: 'Enablable', l: 'toggleEnabled()' },
  { p: 'com.technototes.library.hardware2', c: 'MotorBuilder', l: 'tolerance(int)' },
  { p: 'com.technototes.library.logger.entry', c: 'BooleanEntry', l: 'toString()' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'toString()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberBarEntry', l: 'toString()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberEntry', l: 'toString()' },
  { p: 'com.technototes.library.logger.entry', c: 'NumberSliderEntry', l: 'toString()' },
  { p: 'com.technototes.library.logger.entry', c: 'StringEntry', l: 'toString()' },
  {
    p: 'com.technototes.library.hardware.servo',
    c: 'ServoProfiler',
    l: 'translateTargetPosition(double)',
  },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'triangle' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'TRIANGLE' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'trueColor()' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'trueFormat()' },
  { p: 'com.technototes.library.logger', c: 'Log.Boolean', l: 'trueValue()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'universalLoop()' },
  { p: 'com.technototes.library.control', c: 'GamepadDpad', l: 'up' },
  { p: 'com.technototes.library.hardware.servo', c: 'ServoProfiler', l: 'update()' },
  { p: 'com.technototes.library.util', c: 'Integral', l: 'update(double)' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'uponInit()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode', l: 'uponStart()' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IColorSensor', l: 'value()' },
  { p: 'com.technototes.library.logger', c: 'Log.Logs', l: 'value()' },
  { p: 'com.technototes.library.logger', c: 'LogConfig.Blacklist', l: 'value()' },
  { p: 'com.technototes.library.logger', c: 'LogConfig.Whitelist', l: 'value()' },
  {
    p: 'com.technototes.library.command',
    c: 'Command.CommandState',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'Binding.Type',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase.Axis',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'GamepadBase.Button',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder.Direction',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware.sensor',
    c: 'IMU.AxesSigns',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.hardware2',
    c: 'IMUBuilder.AxesSigns',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.structure',
    c: 'CommandOpMode.OpModeState',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Alliance',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Color',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.library.util',
    c: 'Differential.DifferentialPriority',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  { p: 'com.technototes.library.command', c: 'Command.CommandState', l: 'values()' },
  { p: 'com.technototes.library.control', c: 'Binding.Type', l: 'values()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Axis', l: 'values()' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'values()' },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'MotorEncoder.Direction',
    l: 'values()',
  },
  { p: 'com.technototes.library.hardware.sensor', c: 'IMU.AxesSigns', l: 'values()' },
  { p: 'com.technototes.library.hardware2', c: 'IMUBuilder.AxesSigns', l: 'values()' },
  { p: 'com.technototes.library.structure', c: 'CommandOpMode.OpModeState', l: 'values()' },
  { p: 'com.technototes.library.util', c: 'Alliance', l: 'values()' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'values()' },
  { p: 'com.technototes.library.util', c: 'Differential.DifferentialPriority', l: 'values()' },
  {
    p: 'com.technototes.library.hardware2',
    c: 'MotorBuilder',
    l: 'velocity(PIDFCoefficients)',
    u: 'velocity(com.qualcomm.robotcore.hardware.PIDFCoefficients)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'WaitCommand',
    l: 'WaitCommand(double)',
    u: '%3Cinit%3E(double)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'WaitCommand',
    l: 'WaitCommand(DoubleSupplier)',
    u: '%3Cinit%3E(java.util.function.DoubleSupplier)',
  },
  {
    p: 'com.technototes.library.command',
    c: 'Command',
    l: 'waitUntil(BooleanSupplier)',
    u: 'waitUntil(java.util.function.BooleanSupplier)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whenInverseToggled(Command)',
    u: 'whenInverseToggled(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whenPressed(Command)',
    u: 'whenPressed(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whenPressedReleased(Command, Command)',
    u: 'whenPressedReleased(com.technototes.library.command.Command,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whenReleased(Command)',
    u: 'whenReleased(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whenToggled(Command)',
    u: 'whenToggled(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whileInverseToggled(Command)',
    u: 'whileInverseToggled(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whilePressed(Command)',
    u: 'whilePressed(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whilePressedContinuous(Command)',
    u: 'whilePressedContinuous(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whilePressedOnce(Command)',
    u: 'whilePressedOnce(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whilePressedReleased(Command, Command)',
    u: 'whilePressedReleased(com.technototes.library.command.Command,com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whileReleased(Command)',
    u: 'whileReleased(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whileReleasedOnce(Command)',
    u: 'whileReleasedOnce(com.technototes.library.command.Command)',
  },
  {
    p: 'com.technototes.library.control',
    c: 'CommandInput',
    l: 'whileToggled(Command)',
    u: 'whileToggled(com.technototes.library.command.Command)',
  },
  { p: 'com.technototes.library.util', c: 'Color', l: 'WHITE' },
  { p: 'com.technototes.library.command', c: 'Command', l: 'withTimeout(double)' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'x' },
  { p: 'com.technototes.library.logger.entry', c: 'Entry', l: 'x' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'X' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'xAxis' },
  { p: 'com.technototes.library.control', c: 'GamepadBase', l: 'y' },
  { p: 'com.technototes.library.control', c: 'GamepadBase.Button', l: 'Y' },
  { p: 'com.technototes.library.control', c: 'GamepadStick', l: 'yAxis' },
  { p: 'com.technototes.library.util', c: 'Color', l: 'YELLOW' },
  { p: 'com.technototes.library.hardware.sensor', c: 'IGyro', l: 'zero()' },
  { p: 'com.technototes.library.util', c: 'Integral', l: 'zero()' },
  { p: 'com.technototes.library.hardware.sensor.encoder', c: 'Encoder', l: 'zeroEncoder()' },
  {
    p: 'com.technototes.library.hardware.sensor.encoder',
    c: 'ExternalEncoder',
    l: 'zeroEncoder()',
  },
  { p: 'com.technototes.library.hardware.sensor.encoder', c: 'MotorEncoder', l: 'zeroEncoder()' },
];
updateSearchResults();
