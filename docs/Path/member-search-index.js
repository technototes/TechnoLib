memberSearchIndex = [
  {
    p: 'com.technototes.path.util',
    c: 'RegressionUtil.AccelResult',
    l: 'AccelResult(double, double)',
    u: '%3Cinit%3E(double,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addDisplacementMarker(DisplacementProducer, MarkerCallback)',
    u: 'addDisplacementMarker(com.acmerobotics.roadrunner.trajectory.DisplacementProducer,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addDisplacementMarker(double, double, MarkerCallback)',
    u: 'addDisplacementMarker(double,double,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addDisplacementMarker(double, MarkerCallback)',
    u: 'addDisplacementMarker(double,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addDisplacementMarker(MarkerCallback)',
    u: 'addDisplacementMarker(com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addSpatialMarker(Vector2d, MarkerCallback)',
    u: 'addSpatialMarker(com.acmerobotics.roadrunner.geometry.Vector2d,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addTemporalMarker(double, double, MarkerCallback)',
    u: 'addTemporalMarker(double,double,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addTemporalMarker(double, MarkerCallback)',
    u: 'addTemporalMarker(double,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addTemporalMarker(MarkerCallback)',
    u: 'addTemporalMarker(com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addTemporalMarker(TimeProducer, MarkerCallback)',
    u: 'addTemporalMarker(com.acmerobotics.roadrunner.trajectory.TimeProducer,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'addTrajectory(Trajectory)',
    u: 'addTrajectory(com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'AXIAL_PID' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'back(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'back(double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'back(double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'batteryVoltageSensor',
  },
  { p: 'com.technototes.path.util', c: 'BNO055IMUUtil', l: 'BNO055IMUUtil()', u: '%3Cinit%3E()' },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequenceBuilder', l: 'build()' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'bVal' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'COLOR_ACTIVE_TRAJECTORY',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'COLOR_ACTIVE_TURN',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'COLOR_ACTIVE_WAIT',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'COLOR_INACTIVE_TRAJECTORY',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'COLOR_INACTIVE_TURN',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'COLOR_INACTIVE_WAIT',
  },
  {
    p: 'com.technototes.path.util',
    c: 'LynxModuleUtil.LynxFirmwareVersion',
    l: 'compareTo(LynxModuleUtil.LynxFirmwareVersion)',
    u: 'compareTo(com.technototes.path.util.LynxModuleUtil.LynxFirmwareVersion)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'ConfigurablePose()',
    u: '%3Cinit%3E()',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'ConfigurablePose(double, double)',
    u: '%3Cinit%3E(double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'ConfigurablePose(double, double, double)',
    u: '%3Cinit%3E(double,double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'ConfigurablePose(Pose2d)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'ConfigurablePose(Vector2d)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'ConfigurablePose(Vector2d, double)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Vector2d,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'ConfigurablePoseD()',
    u: '%3Cinit%3E()',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'ConfigurablePoseD(double, double)',
    u: '%3Cinit%3E(double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'ConfigurablePoseD(double, double, double)',
    u: '%3Cinit%3E(double,double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'ConfigurablePoseD(Pose2d)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'ConfigurablePoseD(Vector2d)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'ConfigurablePoseD(Vector2d, double)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Vector2d,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'ConfigurableVector()',
    u: '%3Cinit%3E()',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'ConfigurableVector(double, double)',
    u: '%3Cinit%3E(double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'ConfigurableVector(Vector2d)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'CROSS_TRACK_PID' },
  { p: 'com.technototes.path.util', c: 'DashboardUtil', l: 'DashboardUtil()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DistanceSensorLocalizer',
    l: 'DistanceSensorLocalizer(IGyro, Map<IDistanceSensor, Pose2d>)',
    u: '%3Cinit%3E(com.technototes.library.hardware.sensor.IGyro,java.util.Map)',
  },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequenceRunner', l: 'DO_DASH' },
  {
    p: 'com.technototes.path.util',
    c: 'DashboardUtil',
    l: 'drawPoseHistory(Canvas, List<Pose2d>)',
    u: 'drawPoseHistory(com.acmerobotics.dashboard.canvas.Canvas,java.util.List)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'DashboardUtil',
    l: 'drawRobot(Canvas, Pose2d)',
    u: 'drawRobot(com.acmerobotics.dashboard.canvas.Canvas,com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'DashboardUtil',
    l: 'drawSampledPath(Canvas, Path)',
    u: 'drawSampledPath(com.acmerobotics.dashboard.canvas.Canvas,com.acmerobotics.roadrunner.path.Path)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'DashboardUtil',
    l: 'drawSampledPath(Canvas, Path, double)',
    u: 'drawSampledPath(com.acmerobotics.dashboard.canvas.Canvas,com.acmerobotics.roadrunner.path.Path,double)',
  },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequence', l: 'duration()' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'EmptySequenceException',
    l: 'EmptySequenceException()',
    u: '%3Cinit%3E()',
  },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'encoderOverflow' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'ThreeDeadWheelLocalizer',
    l: 'encoderTicksToInches(double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DeadWheelConstants',
    l: 'encoderTicksToInches(double, double, double, double)',
    u: 'encoderTicksToInches(double,double,double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'encoderTicksToInches(double, double, double, double)',
    u: 'encoderTicksToInches(double,double,double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'encoderTicksToInches(double, double, double, double)',
    u: 'encoderTicksToInches(double,double,double,double)',
  },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequence', l: 'end()' },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'end(boolean)' },
  { p: 'com.technototes.path.command', c: 'TrajectoryCommand', l: 'end(boolean)' },
  { p: 'com.technototes.path.command', c: 'TrajectorySequenceCommand', l: 'end(boolean)' },
  { p: 'com.technototes.path.util', c: 'LynxModuleUtil.LynxFirmwareVersion', l: 'eng' },
  {
    p: 'com.technototes.path.util',
    c: 'LynxModuleUtil',
    l: 'ensureMinimumFirmwareVersion(HardwareMap)',
    u: 'ensureMinimumFirmwareVersion(com.qualcomm.robotcore.hardware.HardwareMap)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'LynxModuleUtil.LynxFirmwareVersion',
    l: 'equals(Object)',
    u: 'equals(java.lang.Object)',
  },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'execute()' },
  { p: 'com.technototes.path.command', c: 'ResetGyroCommand', l: 'execute()' },
  { p: 'com.technototes.path.command', c: 'TrajectoryCommand', l: 'execute()' },
  { p: 'com.technototes.path.command', c: 'TrajectorySequenceCommand', l: 'execute()' },
  {
    p: 'com.technototes.path.util',
    c: 'RegressionUtil',
    l: 'fitAccelData(List<Double>, List<Double>, List<Double>, RegressionUtil.RampResult, File)',
    u: 'fitAccelData(java.util.List,java.util.List,java.util.List,com.technototes.path.util.RegressionUtil.RampResult,java.io.File)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'RegressionUtil',
    l: 'fitRampData(List<Double>, List<Double>, List<Double>, boolean, File)',
    u: 'fitRampData(java.util.List,java.util.List,java.util.List,boolean,java.io.File)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem.Mode',
    l: 'FOLLOW_TRAJECTORY',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'followTrajectory(Trajectory)',
    u: 'followTrajectory(com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'followTrajectory(Trajectory)',
    u: 'followTrajectory(com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'followTrajectoryAsync(Trajectory)',
    u: 'followTrajectoryAsync(com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'followTrajectoryAsync(Trajectory)',
    u: 'followTrajectoryAsync(com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'followTrajectorySequence(TrajectorySequence)',
    u: 'followTrajectorySequence(com.technototes.path.trajectorysequence.TrajectorySequence)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'followTrajectorySequence(TrajectorySequence)',
    u: 'followTrajectorySequence(com.technototes.path.trajectorysequence.TrajectorySequence)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'followTrajectorySequenceAsync(TrajectorySequence)',
    u: 'followTrajectorySequenceAsync(com.technototes.path.trajectorysequence.TrajectorySequence)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'followTrajectorySequenceAsync(TrajectorySequence)',
    u: 'followTrajectorySequenceAsync(com.technototes.path.trajectorysequence.TrajectorySequence)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'followTrajectorySequenceAsync(TrajectorySequence)',
    u: 'followTrajectorySequenceAsync(com.technototes.path.trajectorysequence.TrajectorySequence)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'forward(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'forward(double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'forward(double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'forwardOffset' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'frontEncoder' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'GEAR_RATIO' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'GEAR_RATIO' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'gearRatio' },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequence', l: 'get(int)' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'getAccelerationConstraint(double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'getAccelerationConstraint(double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DeadWheelConstants',
    l: 'getBoolean(Class<? extends Annotation>)',
    u: 'getBoolean(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'getBoolean(Class<? extends Annotation>)',
    u: 'getBoolean(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'getBoolean(Class<? extends Annotation>)',
    u: 'getBoolean(java.lang.Class)',
  },
  { p: 'com.technototes.path.subsystem', c: 'DeadWheelConstants', l: 'getConstant()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumConstants', l: 'getConstant()' },
  { p: 'com.technototes.path.subsystem', c: 'TankConstants', l: 'getConstant()' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DeadWheelConstants',
    l: 'getDouble(Class<? extends Annotation>)',
    u: 'getDouble(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'getDouble(Class<? extends Annotation>)',
    u: 'getDouble(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'getDouble(Class<? extends Annotation>)',
    u: 'getDouble(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'SequenceSegment',
    l: 'getDuration()',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'SequenceSegment',
    l: 'getEndPose()',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'getExternalHeadingVelocity()',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'getExternalHeadingVelocity()',
  },
  {
    p: 'com.technototes.path.util',
    c: 'LynxModuleUtil',
    l: 'getFirmwareVersion(LynxModule)',
    u: 'getFirmwareVersion(com.qualcomm.hardware.lynx.LynxModule)',
  },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'getGearRatio()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePose', l: 'getHeading()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'getHeading()' },
  { p: 'com.technototes.path.subsystem', c: 'DistanceSensorLocalizer', l: 'getHeading()' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'getInt(Class<? extends Annotation>)',
    u: 'getInt(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'getInt(Class<? extends Annotation>)',
    u: 'getInt(java.lang.Class)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'getLastError()' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'getLastError()' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'getLastPoseError()',
  },
  {
    p: 'com.technototes.path.util',
    c: 'LoggingUtil',
    l: 'getLogFile(String)',
    u: 'getLogFile(java.lang.String)',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'SequenceSegment',
    l: 'getMarkers()',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'TurnSegment',
    l: 'getMotionProfile()',
  },
  { p: 'com.technototes.path.subsystem', c: 'DeadWheelConstants', l: 'getMotorVelocityF(double)' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumConstants', l: 'getMotorVelocityF(double)' },
  { p: 'com.technototes.path.subsystem', c: 'TankConstants', l: 'getMotorVelocityF(double)' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'getPID(Class<? extends Annotation>)',
    u: 'getPID(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'getPID(Class<? extends Annotation>)',
    u: 'getPID(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'getPIDF(Class<? extends Annotation>)',
    u: 'getPIDF(java.lang.Class)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'getPIDF(Class<? extends Annotation>)',
    u: 'getPIDF(java.lang.Class)',
  },
  { p: 'com.technototes.path.subsystem', c: 'DistanceSensorLocalizer', l: 'getPoseEstimate()' },
  { p: 'com.technototes.path.subsystem', c: 'DistanceSensorLocalizer', l: 'getPoseVelocity()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'getRadians()' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'getRawExternalHeading()',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'getRawExternalHeading()',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'SequenceSegment',
    l: 'getStartPose()',
  },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'getTicksPerRev()' },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'TurnSegment',
    l: 'getTotalRotation()',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'TrajectorySegment',
    l: 'getTrajectory()',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'getVelocityConstraint(double, double, double)',
    u: 'getVelocityConstraint(double,double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'getVelocityConstraint(double, double, double)',
    u: 'getVelocityConstraint(double,double,double)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'getWheelPositions()' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'getWheelPositions()' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'getWheelPositions()' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'getWheelRadius()' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'getWheelVelocities()',
  },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'getWheelVelocities()' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'getWheelVelocities()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'getX()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'getY()' },
  { p: 'com.technototes.path.subsystem', c: 'DistanceSensorLocalizer', l: 'gyroOffset' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePose', l: 'heading' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'heading' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'HEADING_PID' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'HEADING_PID' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem.Mode', l: 'IDLE' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'imu' },
  { p: 'com.technototes.path.command', c: 'RegenerativeTrajectoryCommand', l: 'initialize()' },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectorySequenceCommand',
    l: 'initialize()',
  },
  { p: 'com.technototes.path.command', c: 'TrajectoryCommand', l: 'initialize()' },
  { p: 'com.technototes.path.command', c: 'TrajectorySequenceCommand', l: 'initialize()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'isBusy()' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'isBusy()' },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequenceRunner', l: 'isBusy()' },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'isFinished()' },
  { p: 'com.technototes.path.command', c: 'TrajectoryCommand', l: 'isFinished()' },
  { p: 'com.technototes.path.command', c: 'TrajectorySequenceCommand', l: 'isFinished()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'kA' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'kA' },
  { p: 'com.technototes.path.util', c: 'RegressionUtil.AccelResult', l: 'kA' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'kStatic' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'kStatic' },
  { p: 'com.technototes.path.util', c: 'RegressionUtil.RampResult', l: 'kStatic' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'kV' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'kV' },
  { p: 'com.technototes.path.util', c: 'RegressionUtil.RampResult', l: 'kV' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'LATERAL_MULTIPLIER' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'LATERAL_MULTIPLIER' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'lateralDistance' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'leftEncoder' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'leftFront' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'leftRear' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineTo(Vector2d)',
    u: 'lineTo(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineTo(Vector2d, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'lineTo(com.acmerobotics.roadrunner.geometry.Vector2d,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineToConstantHeading(Vector2d)',
    u: 'lineToConstantHeading(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineToConstantHeading(Vector2d, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'lineToConstantHeading(com.acmerobotics.roadrunner.geometry.Vector2d,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineToLinearHeading(Pose2d)',
    u: 'lineToLinearHeading(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineToLinearHeading(Pose2d, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'lineToLinearHeading(com.acmerobotics.roadrunner.geometry.Pose2d,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineToSplineHeading(Pose2d)',
    u: 'lineToSplineHeading(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'lineToSplineHeading(Pose2d, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'lineToSplineHeading(com.acmerobotics.roadrunner.geometry.Pose2d,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  { p: 'com.technototes.path.util', c: 'LoggingUtil', l: 'LoggingUtil()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.path.util',
    c: 'LynxModuleUtil.LynxFirmwareVersion',
    l: 'LynxFirmwareVersion(int, int, int)',
    u: '%3Cinit%3E(int,int,int)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'LynxModuleUtil.LynxFirmwareVersionException',
    l: 'LynxFirmwareVersionException(String)',
    u: '%3Cinit%3E(java.lang.String)',
  },
  { p: 'com.technototes.path.util', c: 'LynxModuleUtil', l: 'LynxModuleUtil()', u: '%3Cinit%3E()' },
  { p: 'com.technototes.path.util', c: 'LynxModuleUtil.LynxFirmwareVersion', l: 'major' },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mapPose(Function<Pose2d, T>)',
    u: 'mapPose(java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mapPose(Function<Pose2d, T>)',
    u: 'mapPose(java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'mapVec(Function<Vector2d, T>)',
    u: 'mapVec(java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'mapX(Function<Double, T>)',
    u: 'mapX(java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'mapY(Function<Double, T>)',
    u: 'mapY(java.util.function.Function)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'MAX_ACCEL' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'MAX_ACCEL' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'MAX_ANG_ACCEL' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'MAX_ANG_ACCEL' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'MAX_ANG_VEL' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'MAX_ANG_VEL' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'MAX_RPM' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'MAX_RPM' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'MAX_VEL' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'MAX_VEL' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'MecanumDrivebaseSubsystem(EncodedMotor<DcMotorEx>, EncodedMotor<DcMotorEx>, EncodedMotor<DcMotorEx>, EncodedMotor<DcMotorEx>, IMU, MecanumConstants)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.sensor.IMU,com.technototes.path.subsystem.MecanumConstants)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'MecanumDrivebaseSubsystem(EncodedMotor<DcMotorEx>, EncodedMotor<DcMotorEx>, EncodedMotor<DcMotorEx>, EncodedMotor<DcMotorEx>, IMU, MecanumConstants, Localizer)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.motor.EncodedMotor,com.technototes.library.hardware.sensor.IMU,com.technototes.path.subsystem.MecanumConstants,com.acmerobotics.roadrunner.localization.Localizer)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'MecanumDriveCommand',
    l: 'MecanumDriveCommand(MecanumDrivebaseSubsystem, DoubleSupplier, DoubleSupplier, DoubleSupplier)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.DoubleSupplier,java.util.function.DoubleSupplier,java.util.function.DoubleSupplier)',
  },
  { p: 'com.technototes.path.util', c: 'LynxModuleUtil.LynxFirmwareVersion', l: 'minor' },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mirrorOverX(Pose2d)',
    u: 'mirrorOverX(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mirrorOverX(Pose2d)',
    u: 'mirrorOverX(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mirrorOverY(Pose2d)',
    u: 'mirrorOverY(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mirrorOverY(Pose2d)',
    u: 'mirrorOverY(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'MOTOR_VELO_PID' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'MOTOR_VELO_PID' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'motors' },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mutateHeading(UnaryOperator<Double>)',
    u: 'mutateHeading(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mutateHeading(UnaryOperator<Double>)',
    u: 'mutateHeading(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mutatePose(UnaryOperator<Pose2d>)',
    u: 'mutatePose(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mutatePose(UnaryOperator<Pose2d>)',
    u: 'mutatePose(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mutateVec(UnaryOperator<Vector2d>)',
    u: 'mutateVec(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mutateVec(UnaryOperator<Vector2d>)',
    u: 'mutateVec(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'mutateVec(UnaryOperator<Vector2d>)',
    u: 'mutateVec(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mutateX(UnaryOperator<Double>)',
    u: 'mutateX(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mutateX(UnaryOperator<Double>)',
    u: 'mutateX(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'mutateX(UnaryOperator<Double>)',
    u: 'mutateX(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'mutateY(UnaryOperator<Double>)',
    u: 'mutateY(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'mutateY(UnaryOperator<Double>)',
    u: 'mutateY(java.util.function.UnaryOperator)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'mutateY(UnaryOperator<Double>)',
    u: 'mutateY(java.util.function.UnaryOperator)',
  },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'NNN' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'NNP' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'NPN' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'NPP' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'OMEGA_WEIGHT' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'OMEGA_WEIGHT' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'PNN' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'PNP' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'POSE_HISTORY_LIMIT' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'POSE_HISTORY_LIMIT' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'POSE_HISTORY_LIMIT',
  },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'PPN' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'PPP' },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'r' },
  {
    p: 'com.technototes.path.util',
    c: 'RegressionUtil.RampResult',
    l: 'RampResult(double, double, double)',
    u: '%3Cinit%3E(double,double,double)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectoryCommand',
    l: 'RegenerativeTrajectoryCommand(MecanumDrivebaseSubsystem, BiFunction<Function<Pose2d, TrajectoryBuilder>, T, Trajectory>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.BiFunction,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectoryCommand',
    l: 'RegenerativeTrajectoryCommand(MecanumDrivebaseSubsystem, Function<Function<Pose2d, TrajectoryBuilder>, Trajectory>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectoryCommand',
    l: 'RegenerativeTrajectoryCommand(MecanumDrivebaseSubsystem, Function<T, Trajectory>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectoryCommand',
    l: 'RegenerativeTrajectoryCommand(MecanumDrivebaseSubsystem, Supplier<Trajectory>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Supplier)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectorySequenceCommand',
    l: 'RegenerativeTrajectorySequenceCommand(MecanumDrivebaseSubsystem, BiFunction<Function<Pose2d, TrajectorySequenceBuilder>, T, TrajectorySequence>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.BiFunction,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectorySequenceCommand',
    l: 'RegenerativeTrajectorySequenceCommand(MecanumDrivebaseSubsystem, Function<Function<Pose2d, TrajectorySequenceBuilder>, TrajectorySequence>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectorySequenceCommand',
    l: 'RegenerativeTrajectorySequenceCommand(MecanumDrivebaseSubsystem, Function<T, TrajectorySequence>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'RegenerativeTrajectorySequenceCommand',
    l: 'RegenerativeTrajectorySequenceCommand(MecanumDrivebaseSubsystem, Supplier<TrajectorySequence>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Supplier)',
  },
  { p: 'com.technototes.path.util', c: 'RegressionUtil', l: 'RegressionUtil()', u: '%3Cinit%3E()' },
  {
    p: 'com.technototes.path.util',
    c: 'BNO055IMUUtil',
    l: 'remapAxes(BNO055IMU, AxesOrder, AxesSigns)',
    u: 'remapAxes(com.qualcomm.hardware.bosch.BNO055IMU,org.firstinspires.ftc.robotcore.external.navigation.AxesOrder,com.technototes.path.util.AxesSigns)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'resetAccelConstraint()',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'resetConstraints()',
  },
  {
    p: 'com.technototes.path.command',
    c: 'ResetGyroCommand',
    l: 'ResetGyroCommand(MecanumDrivebaseSubsystem)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'resetTurnConstraint()',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'resetVelConstraint()',
  },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'rightEncoder' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'rightFront' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'rightRear' },
  { p: 'com.technototes.path.util', c: 'LoggingUtil', l: 'ROAD_RUNNER_FOLDER' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DeadWheelConstants',
    l: 'rpmToVelocity(double, double, double)',
    u: 'rpmToVelocity(double,double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumConstants',
    l: 'rpmToVelocity(double, double, double)',
    u: 'rpmToVelocity(double,double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankConstants',
    l: 'rpmToVelocity(double, double, double)',
    u: 'rpmToVelocity(double,double,double)',
  },
  { p: 'com.technototes.path.util', c: 'RegressionUtil.AccelResult', l: 'rSquare' },
  { p: 'com.technototes.path.util', c: 'RegressionUtil.RampResult', l: 'rSquare' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'RUN_USING_ENCODER' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'RUN_USING_ENCODER' },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'SequenceSegment',
    l: 'SequenceSegment(double, Pose2d, Pose2d, List<TrajectoryMarker>)',
    u: '%3Cinit%3E(double,com.acmerobotics.roadrunner.geometry.Pose2d,com.acmerobotics.roadrunner.geometry.Pose2d,java.util.List)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'set(double, double)',
    u: 'set(double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'set(double, double)',
    u: 'set(double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'set(double, double)',
    u: 'set(double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'set(double, double, double)',
    u: 'set(double,double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'set(double, double, double)',
    u: 'set(double,double,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'set(Pose2d)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'set(Pose2d)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'set(Vector2d)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'set(Vector2d)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurableVector',
    l: 'set(Vector2d)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePose',
    l: 'set(Vector2d, double)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Vector2d,double)',
  },
  {
    p: 'com.technototes.path.geometry',
    c: 'ConfigurablePoseD',
    l: 'set(Vector2d, double)',
    u: 'set(com.acmerobotics.roadrunner.geometry.Vector2d,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'setAccelConstraint(TrajectoryAccelerationConstraint)',
    u: 'setAccelConstraint(com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'setConstraints(TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'setConstraints(com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  { p: 'com.technototes.path.subsystem', c: 'DistanceSensorLocalizer', l: 'setGyroOffset(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePose', l: 'setHeading(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'setHeading(double)' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'setMode(DcMotor.RunMode)',
    u: 'setMode(com.qualcomm.robotcore.hardware.DcMotor.RunMode)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'setMode(DcMotor.RunMode)',
    u: 'setMode(com.qualcomm.robotcore.hardware.DcMotor.RunMode)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'setMotorPowers(double, double)',
    u: 'setMotorPowers(double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'setMotorPowers(double, double, double, double)',
    u: 'setMotorPowers(double,double,double,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'setPIDFCoefficients(DcMotor.RunMode, PIDFCoefficients)',
    u: 'setPIDFCoefficients(com.qualcomm.robotcore.hardware.DcMotor.RunMode,com.qualcomm.robotcore.hardware.PIDFCoefficients)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'setPIDFCoefficients(DcMotor.RunMode, PIDFCoefficients)',
    u: 'setPIDFCoefficients(com.qualcomm.robotcore.hardware.DcMotor.RunMode,com.qualcomm.robotcore.hardware.PIDFCoefficients)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DistanceSensorLocalizer',
    l: 'setPoseEstimate(Pose2d)',
    u: 'setPoseEstimate(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'setReversed(boolean)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'setTangent(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'setTurnConstraint(double, double)',
    u: 'setTurnConstraint(double,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'setVelConstraint(TrajectoryVelocityConstraint)',
    u: 'setVelConstraint(com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'setWeightedDrivePower(Pose2d)',
    u: 'setWeightedDrivePower(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'setWeightedDrivePower(Pose2d)',
    u: 'setWeightedDrivePower(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePose', l: 'setX(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'setX(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'setX(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePose', l: 'setY(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'setY(double)' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'setY(double)' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'setZeroPowerBehavior(DcMotor.ZeroPowerBehavior)',
    u: 'setZeroPowerBehavior(com.qualcomm.robotcore.hardware.DcMotor.ZeroPowerBehavior)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'setZeroPowerBehavior(DcMotor.ZeroPowerBehavior)',
    u: 'setZeroPowerBehavior(com.qualcomm.robotcore.hardware.DcMotor.ZeroPowerBehavior)',
  },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequence', l: 'size()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'speed' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineTo(Vector2d, double)',
    u: 'splineTo(com.acmerobotics.roadrunner.geometry.Vector2d,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineTo(Vector2d, double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'splineTo(com.acmerobotics.roadrunner.geometry.Vector2d,double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineToConstantHeading(Vector2d, double)',
    u: 'splineToConstantHeading(com.acmerobotics.roadrunner.geometry.Vector2d,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineToConstantHeading(Vector2d, double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'splineToConstantHeading(com.acmerobotics.roadrunner.geometry.Vector2d,double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineToLinearHeading(Pose2d, double)',
    u: 'splineToLinearHeading(com.acmerobotics.roadrunner.geometry.Pose2d,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineToLinearHeading(Pose2d, double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'splineToLinearHeading(com.acmerobotics.roadrunner.geometry.Pose2d,double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineToSplineHeading(Pose2d, double)',
    u: 'splineToSplineHeading(com.acmerobotics.roadrunner.geometry.Pose2d,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'splineToSplineHeading(Pose2d, double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'splineToSplineHeading(com.acmerobotics.roadrunner.geometry.Pose2d,double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  { p: 'com.technototes.path.trajectorysequence', c: 'TrajectorySequence', l: 'start()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'stop()' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'strafeLeft(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'strafeLeft(double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'strafeLeft(double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'strafeRight(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'strafeRight(double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'strafeRight(double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'strafeTo(Vector2d)',
    u: 'strafeTo(com.acmerobotics.roadrunner.geometry.Vector2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'strafeTo(Vector2d, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint)',
    u: 'strafeTo(com.acmerobotics.roadrunner.geometry.Vector2d,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint)',
  },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'subsystem' },
  { p: 'com.technototes.path.command', c: 'ResetGyroCommand', l: 'subsystem' },
  { p: 'com.technototes.path.command', c: 'TrajectoryCommand', l: 'subsystem' },
  { p: 'com.technototes.path.command', c: 'TrajectorySequenceCommand', l: 'subsystem' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'TankDrivebaseSubsystem(EncodedMotorGroup<DcMotorEx>, EncodedMotorGroup<DcMotorEx>, IMU, TankConstants, Localizer)',
    u: '%3Cinit%3E(com.technototes.library.hardware.motor.EncodedMotorGroup,com.technototes.library.hardware.motor.EncodedMotorGroup,com.technototes.library.hardware.sensor.IMU,com.technototes.path.subsystem.TankConstants,com.acmerobotics.roadrunner.localization.Localizer)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'ThreeDeadWheelLocalizer',
    l: 'ThreeDeadWheelLocalizer(MotorEncoder, MotorEncoder, MotorEncoder, DeadWheelConstants)',
    u: '%3Cinit%3E(com.technototes.library.hardware.sensor.encoder.MotorEncoder,com.technototes.library.hardware.sensor.encoder.MotorEncoder,com.technototes.library.hardware.sensor.encoder.MotorEncoder,com.technototes.path.subsystem.DeadWheelConstants)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'TICKS_PER_REV' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'TICKS_PER_REV' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'ticksPerRev' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePose', l: 'toPose()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurablePoseD', l: 'toPose()' },
  { p: 'com.technototes.path.util', c: 'LynxModuleUtil.LynxFirmwareVersion', l: 'toString()' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'toVec()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'TRACK_WIDTH' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'TRACK_WIDTH' },
  { p: 'com.technototes.path.command', c: 'TrajectoryCommand', l: 'trajectory' },
  { p: 'com.technototes.path.command', c: 'TrajectorySequenceCommand', l: 'trajectory' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'trajectoryBuilder(Pose2d)',
    u: 'trajectoryBuilder(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'trajectoryBuilder(Pose2d)',
    u: 'trajectoryBuilder(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'trajectoryBuilder(Pose2d, boolean)',
    u: 'trajectoryBuilder(com.acmerobotics.roadrunner.geometry.Pose2d,boolean)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'trajectoryBuilder(Pose2d, boolean)',
    u: 'trajectoryBuilder(com.acmerobotics.roadrunner.geometry.Pose2d,boolean)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'trajectoryBuilder(Pose2d, double)',
    u: 'trajectoryBuilder(com.acmerobotics.roadrunner.geometry.Pose2d,double)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'trajectoryBuilder(Pose2d, double)',
    u: 'trajectoryBuilder(com.acmerobotics.roadrunner.geometry.Pose2d,double)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectoryCommand',
    l: 'TrajectoryCommand(MecanumDrivebaseSubsystem, BiFunction<Function<Pose2d, TrajectoryBuilder>, T, Trajectory>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.BiFunction,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectoryCommand',
    l: 'TrajectoryCommand(MecanumDrivebaseSubsystem, Function<Function<Pose2d, TrajectoryBuilder>, Trajectory>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectoryCommand',
    l: 'TrajectoryCommand(MecanumDrivebaseSubsystem, Function<T, Trajectory>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectoryCommand',
    l: 'TrajectoryCommand(MecanumDrivebaseSubsystem, Supplier<Trajectory>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Supplier)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectoryCommand',
    l: 'TrajectoryCommand(MecanumDrivebaseSubsystem, Trajectory)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'TrajectorySegment',
    l: 'TrajectorySegment(Trajectory)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.trajectory.Trajectory)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequence',
    l: 'TrajectorySequence(List<SequenceSegment>)',
    u: '%3Cinit%3E(java.util.List)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'trajectorySequenceBuilder()',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'trajectorySequenceBuilder(Pose2d)',
    u: 'trajectorySequenceBuilder(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'TankDrivebaseSubsystem',
    l: 'trajectorySequenceBuilder(Pose2d)',
    u: 'trajectorySequenceBuilder(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'TrajectorySequenceBuilder(Pose2d, Double, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint, double, double)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Pose2d,java.lang.Double,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint,double,double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'TrajectorySequenceBuilder(Pose2d, TrajectoryVelocityConstraint, TrajectoryAccelerationConstraint, double, double)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Pose2d,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryVelocityConstraint,com.acmerobotics.roadrunner.trajectory.constraints.TrajectoryAccelerationConstraint,double,double)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectorySequenceCommand',
    l: 'TrajectorySequenceCommand(MecanumDrivebaseSubsystem, BiFunction<Function<Pose2d, TrajectorySequenceBuilder>, T, TrajectorySequence>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.BiFunction,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectorySequenceCommand',
    l: 'TrajectorySequenceCommand(MecanumDrivebaseSubsystem, Function<Function<Pose2d, TrajectorySequenceBuilder>, TrajectorySequence>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectorySequenceCommand',
    l: 'TrajectorySequenceCommand(MecanumDrivebaseSubsystem, Function<T, TrajectorySequence>, T)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Function,T)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectorySequenceCommand',
    l: 'TrajectorySequenceCommand(MecanumDrivebaseSubsystem, Supplier<TrajectorySequence>)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,java.util.function.Supplier)',
  },
  {
    p: 'com.technototes.path.command',
    c: 'TrajectorySequenceCommand',
    l: 'TrajectorySequenceCommand(MecanumDrivebaseSubsystem, TrajectorySequence)',
    u: '%3Cinit%3E(com.technototes.path.subsystem.MecanumDrivebaseSubsystem,com.technototes.path.trajectorysequence.TrajectorySequence)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'TrajectorySequenceRunner(TrajectoryFollower, PIDCoefficients)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.followers.TrajectoryFollower,com.acmerobotics.roadrunner.control.PIDCoefficients)',
  },
  { p: 'com.technototes.path.command', c: 'RegenerativeTrajectoryCommand', l: 'trajFunc' },
  { p: 'com.technototes.path.command', c: 'RegenerativeTrajectorySequenceCommand', l: 'trajFunc' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'TRANSLATIONAL_PID' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem.Mode', l: 'TURN' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'turn(double)' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'turn(double)' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'turn(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'turn(double, double, double)',
    u: 'turn(double,double,double)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'turnAsync(double)' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'turnAsync(double)' },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'TurnSegment',
    l: 'TurnSegment(Pose2d, double, MotionProfile, List<TrajectoryMarker>)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Pose2d,double,com.acmerobotics.roadrunner.profile.MotionProfile,java.util.List)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'UNSTABLE_addDisplacementMarkerOffset(double, MarkerCallback)',
    u: 'UNSTABLE_addDisplacementMarkerOffset(double,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'UNSTABLE_addTemporalMarkerOffset(double, MarkerCallback)',
    u: 'UNSTABLE_addTemporalMarkerOffset(double,com.acmerobotics.roadrunner.trajectory.MarkerCallback)',
  },
  { p: 'com.technototes.path.subsystem', c: 'DistanceSensorLocalizer', l: 'update()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'update()' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'update()' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'DistanceSensorLocalizer',
    l: 'update(Pose2d)',
    u: 'update(com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceRunner',
    l: 'update(Pose2d, Pose2d)',
    u: 'update(com.acmerobotics.roadrunner.geometry.Pose2d,com.acmerobotics.roadrunner.geometry.Pose2d)',
  },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem.Mode',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  {
    p: 'com.technototes.path.util',
    c: 'AxesSigns',
    l: 'valueOf(String)',
    u: 'valueOf(java.lang.String)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem.Mode', l: 'values()' },
  { p: 'com.technototes.path.util', c: 'AxesSigns', l: 'values()' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'VX_WEIGHT' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'VX_WEIGHT' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'VY_WEIGHT' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'waitForIdle()' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'waitForIdle()' },
  {
    p: 'com.technototes.path.trajectorysequence',
    c: 'TrajectorySequenceBuilder',
    l: 'waitSeconds(double)',
  },
  {
    p: 'com.technototes.path.trajectorysequence.sequencesegment',
    c: 'WaitSegment',
    l: 'WaitSegment(Pose2d, double, List<TrajectoryMarker>)',
    u: '%3Cinit%3E(com.acmerobotics.roadrunner.geometry.Pose2d,double,java.util.List)',
  },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'WHEEL_BASE' },
  { p: 'com.technototes.path.subsystem', c: 'MecanumDrivebaseSubsystem', l: 'WHEEL_RADIUS' },
  { p: 'com.technototes.path.subsystem', c: 'TankDrivebaseSubsystem', l: 'WHEEL_RADIUS' },
  { p: 'com.technototes.path.subsystem', c: 'ThreeDeadWheelLocalizer', l: 'wheelRadius' },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'x' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'x' },
  { p: 'com.technototes.path.command', c: 'MecanumDriveCommand', l: 'y' },
  { p: 'com.technototes.path.geometry', c: 'ConfigurableVector', l: 'y' },
  {
    p: 'com.technototes.path.subsystem',
    c: 'MecanumDrivebaseSubsystem',
    l: 'zeroExternalHeading()',
  },
];
updateSearchResults();
